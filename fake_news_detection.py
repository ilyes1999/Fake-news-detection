# -*- coding: utf-8 -*-
"""fake news detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fAYH3r4h9j7j4THfuisacd7k60SfufdM
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, recall_score, f1_score, precision_score
import nltk
from sklearn.linear_model import LogisticRegression

nltk.download('stopwords')

data = pd.read_csv('/content/train.csv')

data.isnull().sum()

data = data.fillna('')

data['content'] = data['author'] + ' ' + data['title']

port_stem = PorterStemmer()

def stemming(content):
  stemmed = re.sub('[^a-zA-Z]', ' ', content)
  stemmed = stemmed.lower()
  stemmed = stemmed.split()
  stemmed = [port_stem.stem(word) for word in stemmed if not word in stopwords.words('english')]
  stemmed = ' '.join(stemmed)
  return stemmed

data['content'] = data['content'].apply(stemming)

x = data['content'].values
y = data['label'].values

vectorizer = TfidfVectorizer()
vectorizer.fit(x)
x = vectorizer.transform(x)

x_train, x_test, y_train, y_test = train_test_split(x,y ,test_size = 0.2, random_state = 2, stratify = y)

model = LogisticRegression()

model.fit(x_train, y_train)

x_pred = model.predict(x_test)

print(accuracy_score(x_pred, y_test))
print(precision_score(x_pred, y_test))
print(recall_score(x_pred, y_test))
print(f1_score(x_pred, y_test))

param_grid = {
    'n_neighbors' : np.arange(1,20),
    'metric': ['euclidian', 'manhattan','minkowski']
}
grid = GridSearchCV(KNeighborsClassifier(), param_grid, cv= 5)
grid.fit(x_train, y_train)
print('best score = ', grid.best_score_)
print('best params = ', grid.best_params_)
model = grid.best_estimator_

x_pred = model.predict(x_test)
print(accuracy_score(x_pred, y_test))
print(precision_score(x_pred, y_test))
print(recall_score(x_pred, y_test))
print(f1_score(x_pred, y_test))

